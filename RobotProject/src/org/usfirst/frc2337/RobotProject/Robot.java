// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2337.RobotProject;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2337.RobotProject.commands.*;
import org.usfirst.frc2337.RobotProject.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static chassis chassis;
    public static elevator elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new chassis();
        elevator = new elevator();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
    }
    
    /**
     * This function is a central place to execute things periodically regardless of hte current mode
     * This is called in the periodic functions for Disabled, Teleop, Auton, and Test.
     */
    private void robotPeriodic() {
    	//Gyroscope
    	SmartDashboard.putBoolean(  "Gyro Connected?",      chassis.gyro.isConnected());
        SmartDashboard.putBoolean(  "Gyro Calibrating?",	chassis.gyro.isCalibrating());
        SmartDashboard.putNumber(   "Gyro Yaw",				chassis.gyro.getYaw());
        SmartDashboard.putBoolean(  "Gyro Moving?",			chassis.gyro.isMoving());
        SmartDashboard.putNumber(   "Gyro X Acceleration",	chassis.gyro.getWorldLinearAccelX());
        SmartDashboard.putNumber(   "Gyro Y Acceleration",	chassis.gyro.getWorldLinearAccelY());
    }
    
    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        robotPeriodic();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        robotPeriodic();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	//Zero the gyro once calibration is complete
    	if (RobotMap.gyro_first_iteration && !chassis.gyroIsCalibrating()) {
            chassis.gyroReset();
            RobotMap.gyro_first_iteration = false;
        }
    	
        Scheduler.getInstance().run();
        robotPeriodic();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        robotPeriodic();
    }
    
    // -----------------------------------------------------
    // Utility methods ...
    // -----------------------------------------------------
    /**
     * Flag that states whether debug messages should be written.
     */
    private static volatile boolean debug = false;
    
    /**
     * Return the status of Debug Mode
     */
    public static boolean isDebugModeEnabled() {
        return debug;
    }
    
    /**
     * Enable/Disable whether Debug messages should be written.
     * 
     * @param state whether the debug output should be enabled or not.
     */
    public static void setDebugMode(boolean state) {
        debug = state;
    }
    
    /**
     * Output a message.
     * 
     * @param message the message to be outputted.
     */
    public static void print(String message) {
        System.out.println(message);
    }
    
    /**
     * Output a message if the Debug Mode is enabled.
     * 
     * @param message the message to be outputted.
     */
    public static void printDebug(String message) {
        if (debug) System.out.println(message);
    }
}

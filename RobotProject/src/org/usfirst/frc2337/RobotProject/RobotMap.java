// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject;
    

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.CameraServer;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisfrontLeft;
    public static SpeedController chassisbackLeft;
    public static SpeedController chassisfrontRight;
    public static SpeedController chassisbackRight;
    public static RobotDrive chassisrobotDrive;
    public static CANTalon masterliftMotor;
    public static CANTalon slaveliftMotor1;
    public static AnalogPotentiometer liftPotentiometer;
    public static SpeedController intakeintakeLeftArmMotor;
    public static SpeedController intakeintakeRightArmMotor;
    public static Compressor pnuematicsCompressor;
    public static Solenoid pnuematicsRightSolenoid;
    public static Solenoid pnuematicsLeftSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS  
    
    //Tote sensor for Auton
    public static DigitalInput chassistoteSensor;
    
    //Limit Switches for Tote Lift Mechanism
    public static DigitalInput liftUpperLimitSwitch;
    public static DigitalInput liftLowerLimitSwitch;
    //PowerDistroPanel for reading Volts and Amps.
    public static PowerDistributionPanel pdp;
    //Intake Motors for Arms
    public static SpeedController intakeLeftArmMotor;
    public static SpeedController intakeRightArmMotor;
    
    public static DigitalInput liftAutoTote;
    
    //Kicker finger sensor
    public static DigitalInput kickerFingerSensor;
    //Kicker actuator
    public static DoubleSolenoid kickerSolenoid;
    
    //For Camera
    public static CameraServer usbCamera1;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisfrontLeft = new VictorSP(0);
        LiveWindow.addActuator("chassis", "frontLeft", (VictorSP) chassisfrontLeft);
        
        chassisfrontRight = new VictorSP(1);
        LiveWindow.addActuator("chassis", "frontRight", (VictorSP) chassisfrontRight);
        
        chassisbackLeft = new VictorSP(2);
        LiveWindow.addActuator("chassis", "backLeft", (VictorSP) chassisbackLeft);
        
        chassisbackRight = new VictorSP(3);
        LiveWindow.addActuator("chassis", "backRight", (VictorSP) chassisbackRight);
        
        chassisrobotDrive = new RobotDrive(chassisfrontLeft, chassisbackLeft,
              chassisfrontRight, chassisbackRight);
        
        chassisrobotDrive.setSafetyEnabled(true);
        chassisrobotDrive.setExpiration(0.1);
        chassisrobotDrive.setSensitivity(0.5);
        chassisrobotDrive.setMaxOutput(1.0);
        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, false);
        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, false);
        
        masterliftMotor = new CANTalon(1);
        masterliftMotor.changeControlMode(ControlMode.PercentVbus);
        
        slaveliftMotor1 = new CANTalon(2);
        slaveliftMotor1.changeControlMode(ControlMode.Follower);
        slaveliftMotor1.reverseOutput(true);
        slaveliftMotor1.set(masterliftMotor.getDeviceID());
        
        masterliftMotor.enableBrakeMode(true);
        slaveliftMotor1.enableBrakeMode(true);
        
        
        //LiveWindow.addActuator("Lift", "Motor", (CANTalon) masterliftMotor);   //LiveWindow doesn't play nice with CANTalons
        
        liftPotentiometer = new AnalogPotentiometer(2, 10.0, 0.068);
        LiveWindow.addSensor("Lift", "Potentiometer", liftPotentiometer);
        
        
        //Add a Talon for Right Intake Motor
        intakeintakeLeftArmMotor = new Talon(5);
        LiveWindow.addActuator("Intake", "intakeLeftArmMotor", (Talon) intakeintakeLeftArmMotor);
        
        //Add a Talon for Right In-take Motor
        intakeintakeRightArmMotor = new Talon(6);
        LiveWindow.addActuator("Intake", "intakeRightArmMotor", (Talon) intakeintakeRightArmMotor);
        
        //Add kicker finger sensor
        kickerFingerSensor = new DigitalInput(4);
        LiveWindow.addActuator("Kicker", "FingerSensor", kickerFingerSensor);
        
        //Add kicker solenoid
        kickerSolenoid = new DoubleSolenoid(0,6,7);
        
        //Make new Compressor
        pnuematicsCompressor = new Compressor(0);
        
        //Solenoids for arms
        pnuematicsRightSolenoid = new Solenoid(0, 0);
        LiveWindow.addActuator("Pnuematics", "RightSolenoid", pnuematicsRightSolenoid);
        pnuematicsLeftSolenoid = new Solenoid(0, 1);
        LiveWindow.addActuator("Pnuematics", "LeftSolenoid", pnuematicsLeftSolenoid);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //Tote sensor for Auton
        chassistoteSensor = new DigitalInput(2);
        LiveWindow.addSensor("chassis", "toteSensor", chassistoteSensor);
        
      //Init Intake Motors
        liftUpperLimitSwitch = new DigitalInput(0);
        liftLowerLimitSwitch = new DigitalInput(1);
        LiveWindow.addActuator("Lift", "LimitUpper", liftUpperLimitSwitch);
        LiveWindow.addActuator("Lift", "LimitLower", liftLowerLimitSwitch);
        
        liftAutoTote = new DigitalInput(3);
        LiveWindow.addActuator("Lift", "AutoTote", liftAutoTote);
        
        
        pdp = new PowerDistributionPanel();
        LiveWindow.addSensor("Lift", "PDP1", pdp);
        
        usbCamera1 = CameraServer.getInstance();
        usbCamera1.setQuality(50);
        //usbCamera1.setSize(0); 
    }
}

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject;

import org.usfirst.frc2337.RobotProject.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickDriverButtonA;
    public JoystickButton joystickDriverButtonB;
    public JoystickButton joystickDriverButtonX;
    public JoystickButton joystickDriverButtonY;
    public JoystickButton joystickDriverBumperLeft;
    public JoystickButton joystickDriverBumperRight;
    public JoystickButton joystickDriverButtonBack;
    public JoystickButton joystickDriverButtonStart;
    public JoystickButton joystickDriverHatLeft;
    public JoystickButton joystickDriverHatRight;
    public Joystick joystickDriver;

       
   // public SetBasePosition basePosition;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    
    public JoystickButton operatorControlsBase1;
    public JoystickButton operatorControlsBase2;
    public JoystickButton operatorControlsBase3;
    public JoystickButton operatorControlsLift0;
    public JoystickButton operatorControlsLift1;
    public JoystickButton operatorControlsLift2;
    public JoystickButton operatorControlsLift3;
    public JoystickButton operatorControlsLift4;
    public JoystickButton operatorControlsLift5;
    public Joystick operatorControls;
    
    public JoystickButton intakePull; //Grab the Container in.
    public JoystickButton intakePush; //Spit the Container out 
    public JoystickButton intakeLeft; //Rotate the Container Left (Lift need to be on ground)
    public JoystickButton intakeRight; //Rotate the Container Right 
    public Joystick liftJoystick; //Lift Control (Precise Motor Action)
    
    
    
    
    public OI() { //Operator Interface
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	joystickDriver = new Joystick(0); //Main Driver Joystick 
       
        joystickDriverHatLeft = new JoystickButton(joystickDriver, 9);
        joystickDriverHatLeft.whileHeld(new LIFT_DoNothing());
        joystickDriverButtonStart = new JoystickButton(joystickDriver, 8);
        joystickDriverButtonStart.whileHeld(new LIFT_DoNothing());
        joystickDriverButtonBack = new JoystickButton(joystickDriver, 7);
        joystickDriverButtonBack.whileHeld(new LIFT_DoNothing());
        joystickDriverBumperRight = new JoystickButton(joystickDriver, 6);
        joystickDriverBumperRight.whileHeld(new LIFT_DoNothing());
        joystickDriverBumperLeft = new JoystickButton(joystickDriver, 5);
        joystickDriverBumperLeft.whileHeld(new LIFT_DoNothing());
        joystickDriverButtonY = new JoystickButton(joystickDriver, 4);
        joystickDriverButtonY.whileHeld(new LIFT_DoNothing());
        joystickDriverButtonX = new JoystickButton(joystickDriver, 3);
        joystickDriverButtonX.whileHeld(new LIFT_DoNothing());
        joystickDriverButtonB = new JoystickButton(joystickDriver, 2);
        joystickDriverButtonB.whileHeld(new LIFT_DoNothing());
        joystickDriverButtonA = new JoystickButton(joystickDriver, 1);
        joystickDriverButtonA.whileHeld(new LIFT_DoNothing());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        operatorControls = new Joystick(1); //ButtonPanel for Lift (Operator Left Hand)
        liftJoystick = new Joystick(2); //Nice Fancy Control, for Lift (Precise) (Operator Right hand)
        
        double pos0 = 5;
        double pos1 = 10;
        double pos2 = 15;
        double pos3 = 20;
        double pos4 = 25;
        double pos5 = 30;
        
        double bottom=.75;
        double mid=2.5;
        double top=6.25;
        
        
        double[][] setarray = new double[3][6]; 
        //Bottoms Positions
        setarray[0][0] = bottom + pos0;
        setarray[0][1] = bottom + pos1;
        setarray[0][2] = bottom + pos2;
        setarray[0][3] = bottom + pos3;
        setarray[0][4] = bottom + pos4;
        setarray[0][5] = bottom + pos5;
        //Middle Positions     
        setarray[1][0] = mid + pos0;
        setarray[1][1] = mid + pos1;
        setarray[1][2] = mid + pos2;
        setarray[1][3] = mid + pos3;
        setarray[1][4] = mid + pos4;
        setarray[1][5] = mid + pos5;
       
        setarray[2][0] = top + pos0;
        setarray[2][1] = top + pos1;
        setarray[2][2] = top + pos2;
        setarray[2][3] = top + pos3;
        setarray[2][4] = top + pos4;
        setarray[2][5] = top + pos5;        
        
        int baseposition = 0;
        int toteposition = 0;
        

        if (operatorControls.getRawButton(1)) {
              baseposition = 0;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        if (operatorControls.getRawButton(2)) {
              baseposition = 1;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        if (operatorControls.getRawButton(3)) {
              baseposition = 2;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
       
        
        
        
        
        if (operatorControls.getRawButton(4)) {
              toteposition = 0;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        if (operatorControls.getRawButton(5)) {
              toteposition = 1;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        if (operatorControls.getRawButton(6)) {
              toteposition = 2;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        if (operatorControls.getRawButton(7)) {
              toteposition = 3;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        if (operatorControls.getRawButton(8)) {
              toteposition = 4;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }       
        if (operatorControls.getRawButton(9)) {
              toteposition = 5;
              new LIFT_Positions(setarray[baseposition][toteposition]);
        }
        /*        
        public JoystickButton intakePull; //Grab the Container in.
        public JoystickButton intakePush; //Spit the Container out 
        public JoystickButton intakeRotateLeft; //Rotate the Container Left (Lift need to be on ground)
        public JoystickButton intakeRotateRight; //Rotate the Container Right 
        public Joystick liftJoystick; //Lift Control (Precise Motor Action)
        */
        intakePull = new JoystickButton(liftJoystick, 1);
        intakePull.whileHeld(new LIFT_DoNothing());
        intakePush = new JoystickButton(liftJoystick, 2);
        intakePush.whileHeld(new LIFT_DoNothing());
        
        
        intakeLeft = new JoystickButton(liftJoystick, 3);
        intakeLeft.whileHeld(new LIFT_DoNothing());
        intakeRight = new JoystickButton(liftJoystick, 4);
        intakeRight.whileHeld(new LIFT_DoNothing());
       
   

        SmartDashboard.putData("Pos0", new LIFT_Positions(baseposition+pos0));
        SmartDashboard.putData("Pos1", new LIFT_Positions(baseposition+pos1));
        SmartDashboard.putData("Pos2", new LIFT_Positions(baseposition+pos2));
        SmartDashboard.putData("Pos3", new LIFT_Positions(baseposition+pos3));
        SmartDashboard.putData("Pos4", new LIFT_Positions(baseposition+pos4));
        SmartDashboard.putData("Pos5", new LIFT_Positions(baseposition+pos5));


    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getjoystickDriver() {
        return joystickDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


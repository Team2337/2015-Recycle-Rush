// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject;

import org.usfirst.frc2337.RobotProject.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

     
    //Buttons for Lift Positions
    public JoystickButton operatorControlsBase1;
    public JoystickButton operatorControlsBase2;
    public JoystickButton operatorControlsBase3;
    public JoystickButton operatorControlsLift0;
    public JoystickButton operatorControlsLift1;
    public JoystickButton operatorControlsLift2;
    public JoystickButton operatorControlsLift3;
    public JoystickButton operatorControlsLift4;
    public JoystickButton operatorControlsLift5;
    public JoystickButton operatorControlsAutoTote;
    public Joystick operatorControls;
    
    public Joystick liftJoystick; //Lift Control (Precise Motor Action)
    
    
    
    
    public OI() { //Operator Interface

        operatorControls = new Joystick(2); //ButtonPanel for Lift (Operator Left Hand)
        liftJoystick = new Joystick(1); //Nice Fancy Control, for Lift (Precise) (Operator Right hand)
        
        //Controls for Base Pos.
        operatorControlsBase1 = new JoystickButton(operatorControls, 1);
        operatorControlsBase1.whenPressed(new LIFT_PidSet(0,0));
        operatorControlsBase2 = new JoystickButton(operatorControls, 2);
        operatorControlsBase2.whenPressed(new LIFT_PidSet(1,0));
        operatorControlsBase3 = new JoystickButton(operatorControls, 3);
        operatorControlsBase3.whenPressed(new LIFT_PidSet(2,0));
        
        
        //Tote Buttons (Pos0 - Pos5)
        operatorControlsLift0 = new JoystickButton(operatorControls, 4);
        operatorControlsLift0.whileHeld(new LIFT_PidSet(0,1));
        operatorControlsLift1 = new JoystickButton(operatorControls, 5);
        operatorControlsLift1.whileHeld(new LIFT_PidSet(1,1));
        operatorControlsLift2 = new JoystickButton(operatorControls, 6);
        operatorControlsLift2.whileHeld(new LIFT_PidSet(2,1));
        operatorControlsLift3 = new JoystickButton(operatorControls, 7);
        operatorControlsLift3.whileHeld(new LIFT_PidSet(0,1));
        operatorControlsLift4 = new JoystickButton(operatorControls, 8);
        operatorControlsLift4.whileHeld(new LIFT_PidSet(1,1));
        operatorControlsLift5 = new JoystickButton(operatorControls, 9);
        operatorControlsLift5.whileHeld(new LIFT_PidSet(2,1));        
        
        //AutoToteLift Detector
        operatorControlsAutoTote = new JoystickButton(operatorControls, 10);
        operatorControlsAutoTote.whileHeld(new LIFT_AutoToteLift(1));
        
        //Smart Dashboard 
        SmartDashboard.putData("Pos0", new LIFT_PidSet(0,1));
        SmartDashboard.putData("Pos1", new LIFT_PidSet(1,1));
        SmartDashboard.putData("Pos2", new LIFT_PidSet(2,1));
        SmartDashboard.putData("Pos3", new LIFT_PidSet(3,1));
        SmartDashboard.putData("Pos4", new LIFT_PidSet(4,1));
        SmartDashboard.putData("Pos5", new LIFT_PidSet(5,1));
        
        SmartDashboard.putData("Base0", new LIFT_PidSet(0,0));
        SmartDashboard.putData("Base1", new LIFT_PidSet(1,0));
        SmartDashboard.putData("Base2", new LIFT_PidSet(2,0));
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    //For OperatorControl Joystick (allows for it to run)
    public Joystick getOperatorControls() {
        return operatorControls; 
    }
    //For LiftJoystick Joystick (allows for it to run)
    public Joystick getLiftJoystick() {
        return liftJoystick; 
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


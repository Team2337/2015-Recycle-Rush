// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject;

import org.usfirst.frc2337.RobotProject.commands.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    //The joystick for In-take Mechanism
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton intakePull;
    public JoystickButton intakePush;
    public JoystickButton intakeRight;
    public JoystickButton intakeLeft;
    public JoystickButton intakeDeploy;
    public Joystick driveJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() { 
    	 //Speed for the motors for any given button or command
    	 double speed = .7;
         double p = 1; //Positive
         double n = -1; //Negitive
         
         //Pull commands. 
         double rightPull = speed * n; 
         double leftPull = speed * p;
         
         //Push commands. 
         double rightPush = speed * p;
         double leftPush = speed * n;
         		
         //Declare variables
         double rightRotateRight,leftRotateRight, leftRotateLeft,rightRotateLeft;
         
         //Rotaing commands
         rightRotateRight = leftRotateRight = speed *n;
         leftRotateLeft = rightRotateLeft = speed * p;

        //Make new Joy-stick (0)
        driveJoystick = new Joystick(0);
        
        intakeDeploy = new JoystickButton(driveJoystick, 5);
        intakeDeploy.whileHeld(new PNUEMATIC_ArmsOut());
        intakeLeft = new JoystickButton(driveJoystick, 4);
        intakeLeft.whileHeld(new INTAKE_ActivateMotors(leftRotateLeft,rightRotateLeft));
        intakeRight = new JoystickButton(driveJoystick, 3);
        intakeRight.whileHeld(new INTAKE_ActivateMotors(leftRotateRight,rightRotateRight));
        intakePush = new JoystickButton(driveJoystick, 2);
        intakePush.whileHeld(new INTAKE_ActivateMotors(leftPush,rightPush));
        intakePull = new JoystickButton(driveJoystick, 1);
        intakePull.whileHeld(new INTAKE_ActivateMotors(leftPull,rightPull));

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("PNEUMATIC_ArmsIn", new PNEUMATIC_ArmsIn());

        SmartDashboard.putData("PNUEMATIC_ArmsOut", new PNUEMATIC_ArmsOut());
        
        SmartDashboard.putData("INTAKE_ActivateMotors", new INTAKE_ActivateMotors(.5,.5));


             
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveJoystick() {
        return driveJoystick; //I have no clue what this does... Returns something...
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


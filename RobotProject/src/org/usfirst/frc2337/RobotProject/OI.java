// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject;

import org.usfirst.frc2337.RobotProject.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickDriverButtonA;
    public JoystickButton joystickDriverButtonB;
    public JoystickButton joystickDriverButtonX;
    public JoystickButton joystickDriverButtonY;
    public JoystickButton joystickDriverBumperLeft;
    public JoystickButton joystickDriverBumperRight;
    public JoystickButton joystickDriverButtonBack;
    public JoystickButton joystickDriverButtonStart;
    public JoystickButton joystickDriverHatLeft;
    public JoystickButton joystickDriverHatRight;
    public Joystick joystickDriver;
    
    public JoystickButton operatorControlsBase1;
    public JoystickButton operatorControlsBase2;
    public JoystickButton operatorControlsBase3;
    public JoystickButton operatorControlsLift0;
    public JoystickButton operatorControlsLift1;
    public JoystickButton operatorControlsLift2;
    public JoystickButton operatorControlsLift3;
    public JoystickButton operatorControlsLift4;
    public JoystickButton operatorControlsLift5;
    public Joystick operatorControls;
    public SetBasePosition basePosition;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        double pos0 = Double.parseDouble(Config.getSetting("pos0"));
        double pos1 = Double.parseDouble(Config.getSetting("pos1"));
        double pos2 = Double.parseDouble(Config.getSetting("pos2"));
        double pos3 = Double.parseDouble(Config.getSetting("pos3"));
        double pos4 = Double.parseDouble(Config.getSetting("pos4"));
        double pos5 = Double.parseDouble(Config.getSetting("pos5"));

        double baseposition = basePosition.getPosition();
        joystickDriver = new Joystick(0);
        operatorControls = new Joystick(1);
        
        joystickDriverHatRight = new JoystickButton(joystickDriver, 10);
        joystickDriverHatRight.whileHeld(new DoNothing());
        joystickDriverHatLeft = new JoystickButton(joystickDriver, 9);
        joystickDriverHatLeft.whileHeld(new DoNothing());
        joystickDriverButtonStart = new JoystickButton(joystickDriver, 8);
        joystickDriverButtonStart.whileHeld(new DoNothing());
        joystickDriverButtonBack = new JoystickButton(joystickDriver, 7);
        joystickDriverButtonBack.whileHeld(new DoNothing());
        joystickDriverBumperRight = new JoystickButton(joystickDriver, 6);
        joystickDriverBumperRight.whileHeld(new DoNothing());
        joystickDriverBumperLeft = new JoystickButton(joystickDriver, 5);
        joystickDriverBumperLeft.whileHeld(new DoNothing());
        joystickDriverButtonY = new JoystickButton(joystickDriver, 4);
        joystickDriverButtonY.whileHeld(new DoNothing());
        joystickDriverButtonX = new JoystickButton(joystickDriver, 3);
        joystickDriverButtonX.whileHeld(new DoNothing());
        joystickDriverButtonB = new JoystickButton(joystickDriver, 2);
        joystickDriverButtonB.whileHeld(new DoNothing());
        joystickDriverButtonA = new JoystickButton(joystickDriver, 1);
        joystickDriverButtonA.whileHeld(new DoNothing());


        
        operatorControlsBase1 = new JoystickButton(operatorControls, 1);
        operatorControlsBase1.whenPressed(new SetBasePosition("top"));
        operatorControlsBase2 = new JoystickButton(operatorControls, 2);
        operatorControlsBase2.whenPressed(new SetBasePosition("mid"));
        operatorControlsBase3 = new JoystickButton(operatorControls, 3);
        operatorControlsBase3.whenPressed(new SetBasePosition("bottom"));
              
        
        operatorControlsLift0 = new JoystickButton(operatorControls, 4);
        operatorControlsLift0.whenPressed(new Positions(baseposition+pos0));
        operatorControlsLift1 = new JoystickButton(operatorControls, 5);
        operatorControlsLift1.whenPressed(new Positions(baseposition+pos0));
        operatorControlsLift2 = new JoystickButton(operatorControls, 6);
        operatorControlsLift2.whenPressed(new Positions(baseposition+pos0));        
        operatorControlsLift3 = new JoystickButton(operatorControls, 7);
        operatorControlsLift3.whenPressed(new Positions(baseposition+pos0));        
        operatorControlsLift4 = new JoystickButton(operatorControls, 8);
        operatorControlsLift4.whenPressed(new Positions(baseposition+pos0));       
        operatorControlsLift5 = new JoystickButton(operatorControls, 9);
        operatorControlsLift5.whenPressed(new Positions(baseposition+pos0));   
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("StopMotors", new StopMotors());

        SmartDashboard.putData("DriveWithJoystickArcade", new DriveWithJoystickArcade());

        SmartDashboard.putData("DriveWithJoystickTank", new DriveWithJoystickTank());

        SmartDashboard.putData("DriveWithJoystickMecanum", new DriveWithJoystickMecanum());

        SmartDashboard.putData("Pos0", new Positions(baseposition+pos0));
        SmartDashboard.putData("Pos1", new Positions(baseposition+pos1));
        SmartDashboard.putData("Pos2", new Positions(baseposition+pos2));
        SmartDashboard.putData("Pos3", new Positions(baseposition+pos3));
        SmartDashboard.putData("Pos4", new Positions(baseposition+pos4));
        SmartDashboard.putData("Pos5", new Positions(baseposition+pos5));

        SmartDashboard.putData("Top", new SetBasePosition("top"));
        SmartDashboard.putData("Middle", new SetBasePosition("middle"));
        SmartDashboard.putData("Bottom", new SetBasePosition("bottom"));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getjoystickDriver() {
        return joystickDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


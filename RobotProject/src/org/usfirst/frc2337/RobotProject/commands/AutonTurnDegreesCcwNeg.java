// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;

/**
 * Drive for a specified time. May or may not be in a straight line. Linearly ramps up the speed.
 * 
 * @param seconds The time, in seconds, to drive for.
 */
public class AutonTurnDegreesCcwNeg extends Command {
		private double degrees;
		private double gyroValue;
		
		private double seconds = 5;
		private double kP = .08;		
		private double error = 0;
		private double turnValue = 0;

		
	    public AutonTurnDegreesCcwNeg(double degrees) {
	    	this.degrees = degrees;    	

	        // Use requires() here to declare subsystem dependencies
	        // eg. requires(chassis);

	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	        requires(Robot.chassis);

	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	    }

	    // Called just before this Command runs the first time
	    protected void initialize() {
	    	setTimeout(seconds);
	    	Robot.chassis.disable();
	    	RobotMap.imu.zeroYaw();    	
	    }

	    // Called repeatedly when this Command is scheduled to run
	    protected void execute() {
	    	gyroValue = RobotMap.imu.getYaw();
	    	error = (degrees - gyroValue);		
	    	turnValue = error * kP;		
	    	
	    	if (turnValue > 0.5) {
	    		turnValue = .5;
	    	}
	    	if (turnValue < -0.5) {
	    		turnValue = -0.5;
	    	}
	        	
	    	Robot.chassis.driveMecanum(0, 0, turnValue);
	    	
	    }

	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        return RobotMap.imu.getYaw() < degrees || isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.chassis.stopMotors();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.chassis.stopMotors();
    }
}

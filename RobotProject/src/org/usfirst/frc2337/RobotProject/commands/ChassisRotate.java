// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;

/**
 *
 */
public class  ChassisRotate extends PIDCommand {

	double angle;
	
    public ChassisRotate(double angle) {

        super("ChassisRotate", .03, 0.0, 0.1);
        getPIDController().setContinuous(true);
        getPIDController().setAbsoluteTolerance(.5);
        getPIDController().setInputRange(-180, 180);
        getPIDController().setOutputRange(-0.7, 0.7);

        LiveWindow.addActuator("GyroPID", "GyroPIDSubsystem Controller", getPIDController());

        this.angle = angle;

        requires(Robot.chassis);

    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop

        return RobotMap.imu.pidGet();

    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor

    	SmartDashboard.putNumber("Rotate Output", output);
    	
    	if (output > 0 && output < 0.15) {
    		output = 0.15;
    	}
    	if (output > -0.15 && output < 0) {
    		output = -0.15;
    	}
    	Robot.chassis.driveMecanum(0, 0, output);

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.imu.zeroYaw();
    	getPIDController().setSetpoint(angle);
    	setTimeout(5.0);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (getPIDController().onTarget() || isTimedOut()) ;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;

/**
 *
 */
public class  LIFT_PidSetWithSpeed extends Command {

   

    int pos; //What Pos (for Array)
    int type; //The type of Command (0 = Base Buttons) (1 = Tote Buttons)
	double upSpeed, downSpeed; //Lift Speed 
    
    public LIFT_PidSetWithSpeed(int pos, int type) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	//requires(Robot.chassis);
    	requires(Robot.lift);
    	

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    	//Make the variables for this command usable through out it
    	this.pos = pos; 
    	this.type = type;
    }
    
    public LIFT_PidSetWithSpeed(int pos, int type, double upSpeed, double downSpeed) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	//requires(Robot.chassis);
    	requires(Robot.lift);
    	

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    	//Make the variables for this command usable through out it
    	this.pos = pos; 
    	this.type = type;
    	this.upSpeed = upSpeed;
    	this.downSpeed = downSpeed;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.lift.getPIDController().setOutputRange(downSpeed, upSpeed);
       //[]\ RobotMap.masterliftMotor.setVoltageRampRate(30);

    	//Type == 0 (So, thats the 'Base' buttons/positions
    	if (type == 0) {
        	
        	Robot.lift.setBase(pos); //Run command in Lift Subsytem
        	
        	//new LIFT_Positions(setarray[base][tote]);
        	//Robot.lift.enable();
            //Robot.lift.setSetpoint(setarray[base][tote]); 

    	}
    	//Type == 1 (So, thats the 'Tote' buttons/positions
    	if (type == 1) {
    			Robot.lift.setTote(pos); //Run command in Lift Subsytem
        	//new LIFT_Positions(setarray[base][tote]);
        	//Robot.lift.enable();
            //Robot.lift.setSetpoint(setarray[base][tote]);
    	}

    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
   	//[]\ System.out.println("made it to finish");
    	 return (Robot.lift.onTarget());
   	 
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.lift.getPIDController().setOutputRange(Robot.lift.teleopMaxSpeedDown, Robot.lift.teleopMaxSpeedUp);
    	RobotMap.masterliftMotor.set(0);
    	Robot.lift.enable();
    	Robot.lift.setSetpoint(Robot.lift.getPosition());
    //	System.out.println("made it to end");
       // RobotMap.masterliftMotor.setVoltageRampRate(0);

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}

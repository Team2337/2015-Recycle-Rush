// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;

/**
 *
 */
public class  CONTAINERARM_JoystickRun extends Command {
	
	public boolean onUse = false;
	public double speed = 0.50;
	
    public CONTAINERARM_JoystickRun() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	//requires(Robot.chassis);
    	requires(Robot.conArm);
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double conJoystick = Robot.oi.containerJoystick.getRawAxis(1);
    	
    	if ((conJoystick < -0.1) || (conJoystick > 0.1)) { //Dead Band for Joystick
    		System.out.println("Out of deadband");
    		if (!Robot.conArm.joystickModeStatus())
    		{
    			System.out.println("In mode");
    			RobotMap.containerArm.set(speed * conJoystick);
    			onUse = true;
    		}
    	}
    	else {
    		if (onUse) {
    			System.out.println("Disabled");
    			onUse = false;
    			RobotMap.containerArm.disable();
    		}
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}

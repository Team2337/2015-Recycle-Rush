// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;

/**
 *
 */
public class  CONTAINERARM_JoystickThrottle extends Command {
	
	/** Defines the speed setting for the container arm */
	public double speed = 0.50;
	/** Defines the throttle position from the X axis on the lift joystick */
	double throttlePosition;
	/** Defines the PID write output for the container arm */
	double armPosition;
	/** Defines the range of motion for the container arm based modifying the original value of -1 to 1 */
	double range;
	
    public CONTAINERARM_JoystickThrottle() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	//requires(Robot.chassis);
    	requires(Robot.containerArmLift);
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Robot.containerArmLift.setSetpoint(Robot.containerArmLift.getPosition()); //Set the armLift
    	//Robot.containerArmLift.enable(); //Enable armLift Pid
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double conJoystick = Robot.oi.liftJoystick.getRawAxis(2);
    			//RobotMap.containerArmMotor.set(speed * conJoystick);
    	
    			throttlePosition = -1*(conJoystick - 1);  // Scale input to 0-2 and invert
    			range = (Robot.containerArmLift.armTopLimit - Robot.containerArmLift.armBottomLimit)/2;
    			
    			armPosition = (throttlePosition * range) + Robot.containerArmLift.armBottomLimit; 
    			
    			
    			
    			Robot.containerArmLift.setSetpoint(armPosition);
    			
    			
    			SmartDashboard.putNumber("range", range);
    			SmartDashboard.putNumber("Scaled Throttle", throttlePosition);
    			SmartDashboard.putNumber("Desired Arm Position", armPosition);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}

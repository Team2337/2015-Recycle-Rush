// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;

	/**
	 * Strafe using Encoder. 
	 * Parameters are distance(ticks) and speed.
	 * Needs Negative speed - towards lift.  Approx 86 ticks per foot (positive ticks away from lift).
	 */
	public class  AutonEncoderStrafeOut extends Command {
		
		double speed;    	//negative is towards totes/auton zone
		int distance;		//Auton zone is approx 975 ticks
		private double gyroValue;
		private double kP = .03;  

		
	    public AutonEncoderStrafeOut(double speed, int distance) {
	    	this.distance = distance;
	    	this.speed = -speed;
	        // Use requires() here to declare subsystem dependencies
	        // eg. requires(chassis);

	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	        requires(Robot.chassis);

	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	    }

	    // Called just before this Command runs the first time
	    protected void initialize() {
	    	//Robot.chassis.resetStrafeEncoder();    			 //using seperate command to do this
	    }

	    // Called repeatedly when this Command is scheduled to run
	    protected void execute() {
	    	
	     	gyroValue = RobotMap.imu.getYaw();
	    	
	    	gyroValue = gyroValue * -kP;
	    	
	    	if (gyroValue > 0.5) {
	    		gyroValue = .5;
	    	}
	    	if (gyroValue < -0.5) {
	    		gyroValue = -0.5;
	    	}
	    	Robot.chassis.driveMecanum(0, speed, gyroValue);
	    }

	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        return ((Robot.chassis.readStrafeEncoder() > distance) || isTimedOut());
	    }

	    // Called once after isFinished returns true
	    protected void end() {
	    }
	    
	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
	    	end();
	    }
	}
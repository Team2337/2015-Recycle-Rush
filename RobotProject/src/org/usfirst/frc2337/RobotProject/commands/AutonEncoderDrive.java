// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2337.RobotProject.Robot;

	/**
	 * Drive until the tote sensor is triggered.
	 */
	public class  AutonEncoderDrive extends Command {
		
		double distance;
		double speed;
		double toteSpacing = 25000.0;

	    public AutonEncoderDrive() {
	        // Use requires() here to declare subsystem dependencies
	        // eg. requires(chassis);

	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	        requires(Robot.chassis);

	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	    }

	    // Called just before this Command runs the first time
	    protected void initialize() {
	    	setTimeout(3);
	    	Robot.chassis.resetEncoder();
	    }

	    // Called repeatedly when this Command is scheduled to run
	    protected void execute() {
	    	distance = Robot.chassis.readEncoderDistance();
	    	speed = (distance-toteSpacing)/1000;
	    	if (speed < 0.5) {
	    		speed = -0.5;
	    	}		
	    	Robot.chassis.driveMecanum(speed, 0, 0);
	    }

	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        return ((distance > toteSpacing) || isTimedOut());
	    }

	    // Called once after isFinished returns true
	    protected void end() {
	    	Robot.chassis.driveMecanum(0.5, 0, 0);
	    	Robot.chassis.stopMotors();
	    }

	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
	    	end();
	    }
	}
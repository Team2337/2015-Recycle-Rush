
// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.subsystems;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;
import org.usfirst.frc2337.RobotProject.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class ContainerArmLift extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController motor = RobotMap.containerArmMotor;
    AnalogPotentiometer potentiometer = RobotMap.armPotentiometer;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //Lift PID variables
    double armSetPointTolerance = 0.05;
    
    public double armMaxSpeedUp = 0.5;
    public double armMaxSpeedDown = -0.5;

    double armTopLimit = 2.0;
    double armBottomLimit = 1.0;
	
 
    double pos0,pos1,pos2,pos3,pos4,pos5,pos6,pos7;

   
 
    
    // Initialize your subsystem here
    public ContainerArmLift() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ContainerArmLift", 2.0, 0.0, 0.0);
        setAbsoluteTolerance(armSetPointTolerance);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("ContainerArmLift", "PIDSubsystem Controller", getPIDController());   
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        
        getPIDController().setOutputRange(armMaxSpeedDown, armMaxSpeedUp);   //For the lift PID
        getPIDController().setInputRange(armBottomLimit, armTopLimit);
          	

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new CONTAINERARM_JoystickRun());


        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return potentiometer.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        motor.pidWrite(-output);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    

    public void setSpeed() {
        getPIDController().setOutputRange(armMaxSpeedDown, armMaxSpeedUp);   //For the lift PID
    }
}

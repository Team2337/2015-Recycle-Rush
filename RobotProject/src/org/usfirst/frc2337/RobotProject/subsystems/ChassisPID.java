// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject.subsystems;

import org.usfirst.frc2337.RobotProject.Robot;
import org.usfirst.frc2337.RobotProject.RobotMap;
import org.usfirst.frc2337.RobotProject.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ChassisPID extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontLeft = RobotMap.chassisfrontLeft;
    SpeedController backLeft = RobotMap.chassisbackLeft;
    SpeedController frontRight = RobotMap.chassisfrontRight;
    SpeedController backRight = RobotMap.chassisbackRight;
    RobotDrive robotDrive = RobotMap.chassisrobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    DigitalInput toteSensor = RobotMap.chassistoteSensor;
    
    Encoder encoder = RobotMap.autonEncoder;
    
    double minRate = 10;
    double distancePerPulse = 2;
    boolean encoderReverseDirection;
    int encoderSamplesToAverage = 5;
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public ChassisPID() {
        super("ChassisPID", .005, 0.0, 0.0);
        setAbsoluteTolerance(5);
        getPIDController().setContinuous(false);
        
        LiveWindow.addActuator("ChassisPID", "PIDSubsystem Controller", getPIDController());
        SmartDashboard.putNumber("setpoint", this.getSetpoint());
        getPIDController().setOutputRange(-0.5, 0.5);  
        //getPIDController().setInputRange(liftBottomLimit, liftTopLimit);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        setDefaultCommand(new DriveWithJoystickMecanum());
    }
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return encoder.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        this.driveMecanum(-output, 0, 0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    /**
     * Stops all motors and sets their output to 0
     */
    public void stopMotors() {
    	robotDrive.stopMotor();
    }
    
    /**
     * Controls the motors with an arcade-style control system.
     * 
     * @param moveValue The fraction of full speed to drive, ranging from -1.0 (full back) to 1.0 (full forward).
     * @param rotateValue The fraction of full speed to rotate, ranging from -1.0 (left) to 1.0 (right).
     */
    public void driveArcade(double moveValue, double rotateValue) {
    	robotDrive.arcadeDrive(moveValue, rotateValue);
    }
    
    /**
     * Controls the motors with a tank-style control system.
     * 
     * @param leftValue The fraction of full speed to drive the left motors, ranging from -1.0 (full back) to 1.0 (full forward).
     * @param rightValue The fraction of full speed to drive the right motors, ranging from -1.0 (full back) to 1.0 (full forward).
     */
    public void driveTank(double leftValue, double rightValue) {
    	robotDrive.tankDrive(leftValue, rightValue);
    }
    
    /**
     * Controls the motors with a mecanum drive setup.
     * 
     * @param moveValue The fraction of full speed to drive, ranging from -1.0 (full back) to 1.0 (full forward).
     * @param strafeValue The fraction of full speed to strafe, ranging from -1.0 (full back) to 1.0 (full forward).
     * @param rotateValue The fraction of full speed to rotate, ranging from -1.0 (full back) to 1.0 (full forward).
     */
    public void driveMecanum(double moveValue, double strafeValue, double rotateValue) {
    	robotDrive.mecanumDrive_Cartesian(strafeValue, moveValue, rotateValue, 0);
    }
    
    /**
     * Return whether the tote sensor has been triggered.
     * 
     * @return the current state of the tote sensor, inverted to read roperly
     */
    public boolean isToteSensor() {
    	return !toteSensor.get();
    }
    public void initEncoder() {
    	encoder.setMinRate(minRate);
    	encoder.setDistancePerPulse(distancePerPulse);;
    	encoder.setReverseDirection(encoderReverseDirection);
    	encoder.setSamplesToAverage(encoderSamplesToAverage);
     	encoder.reset();
    
    }
    public void resetEncoder() {
    	encoder.reset();
    }
    
    public double readEncoderDistance() {
    	return encoder.getDistance();
    }
}

